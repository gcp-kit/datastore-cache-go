// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "google.golang.org/genproto/googleapis/datastore/v1"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetMulti mocks base method
func (m *MockCache) GetMulti(ctx context.Context, projectID string, keys []*datastore.Key) ([]*datastore.EntityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, projectID, keys)
	ret0, _ := ret[0].([]*datastore.EntityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulti indicates an expected call of GetMulti
func (mr *MockCacheMockRecorder) GetMulti(ctx, projectID, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockCache)(nil).GetMulti), ctx, projectID, keys)
}

// SetMulti mocks base method
func (m *MockCache) SetMulti(ctx context.Context, projectID string, items []*datastore.EntityResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMulti", ctx, projectID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMulti indicates an expected call of SetMulti
func (mr *MockCacheMockRecorder) SetMulti(ctx, projectID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMulti", reflect.TypeOf((*MockCache)(nil).SetMulti), ctx, projectID, items)
}

// DeleteMulti mocks base method
func (m *MockCache) DeleteMulti(ctx context.Context, projectID string, keys []*datastore.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulti", ctx, projectID, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti
func (mr *MockCacheMockRecorder) DeleteMulti(ctx, projectID, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockCache)(nil).DeleteMulti), ctx, projectID, keys)
}
